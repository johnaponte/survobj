[{"path":"https://johnaponte.github.io/survobj/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://johnaponte.github.io/survobj/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://johnaponte.github.io/survobj/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://johnaponte.github.io/survobj/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://johnaponte.github.io/survobj/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://johnaponte.github.io/survobj/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://johnaponte.github.io/survobj/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://johnaponte.github.io/survobj/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://johnaponte.github.io/survobj/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://johnaponte.github.io/survobj/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://johnaponte.github.io/survobj/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://johnaponte.github.io/survobj/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://johnaponte.github.io/survobj/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://johnaponte.github.io/survobj/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://johnaponte.github.io/survobj/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://johnaponte.github.io/survobj/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://johnaponte.github.io/survobj/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://johnaponte.github.io/survobj/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://johnaponte.github.io/survobj/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://johnaponte.github.io/survobj/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://johnaponte.github.io/survobj/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://johnaponte.github.io/survobj/articles/example_distributions.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Defining and using objects of class SURVIVAL","text":"present examples construct use objects class SURVIVAL. function s_factory(s_family,...) function call constructor family distribution. family set parameters. factories implement polymorphic behavior according parameters given, possible partial match name parameters need spell correctly. error processing parameters, factory return message set parameters accepted factory. object class SURVIVAL instantiated, access following set methods: sfx(SURVIVAL, t) survival (proportion population free events) time t hfx(SURVIVAL, t) hazard time t Cum_Hfx(SURVIVAL, t) cumulative hazard time t InvCum_Hfx(SURVIVAL, H) inverse cumulative hazard H rsurv(SURVIVAL, n) generation n random survival times distribution rsurvhr(SURVIVAL, hr) generation random survival times hazard ratio hr Instead using helper functions call methods, methods can called directly object : obj <- s_factory(s_family, ...) obj <- s_family(...) obj$sfx(t) obj$hfx(t) obj$Cum_Hfx(t) obj$InvCum_Hfx(H) obj$rsurv(n) obj$rsurvhr(hr) addition, following functions help plot distributions plot(SURVIVAL) generic S3 method calls plot_survival() function plot_survival(SURVIVAL, timeto, main) plots survival, hazard, cumulative hazard inverse cumulative hazard functions 0 timeto. optional title can specified main parameter plot_compare(SURVIVAL1, SURVIVAL2, timeto) produce comparison functions two SURVIVAL objects. produces ggplot Kaplan-Meier curve Cumulative Hazard nsim simulations study subjects number subjects, censored time timeto. optional parameter alpha defines transparency simulation graph. addition simulations, graph also present calculated survival cumulative hazard function distribution, evaluate good simulations compared real values. Functions plots simulated proportional hazards, accelerated failure time accelerated hazard models: ggplot_survival_hr <- function(SURVIVAL, hr, timeto, subjects, nsim, alpha = 0.1) ggplot_survival_aft <- function(SURVIVAL, aft, timeto, subjects, nsim, alpha = 0.1) ggplot_survival_ah <- function(SURVIVAL, aft, hr, timeto, subjects, nsim, alpha = 0.1) functions produce Kaplan-Meier curves Cumulative hazard curves nsimsimulations baseline distribution corresponding proportional hazard, accelerate failure time censored timeto time. simulation survival times survival times hazard ratios follow methods described Bender, Augustin, Blettner (2003) Leemis (1987)","code":"library(survobj) library(survival) library(ggplot2)"},{"path":"https://johnaponte.github.io/survobj/articles/example_distributions.html","id":"exponential-distribution","dir":"Articles","previous_headings":"","what":"Exponential Distribution","title":"Defining and using objects of class SURVIVAL","text":"canonical parameter exponential distribution called lambda represents constant hazard time. units lambda define units time distribution. example lambda = 3 used represent probability 3 events 1 year, survival function sfx(SURVIVAL, 1) calculate proportion population free events 1 year. distribution can defined also proportion population free events (surv) time t proportion population events (fail) time t  next set examples show define exponential distribution based surviving failing proportion time t following code shows make 100 simulations 1000 subjects object SURVIVAL class. red line value distribution.","code":"# Instanciate an object of class SURVIVAL with the Exponential distribution obj1 <- s_factory(s_exponential, lambda = 3) obj1 #> SURVIVAL object #> Distribution:  EXPONENTIAL  #> lambda : 3  # Survival at time 1 sfx(obj1,1) #> [1] 0.04978707  # Hazard at time 1 hfx(obj1,1) #> [1] 3  # Cumulative hazard at time 1 Cum_Hfx(obj1,1) #> [1] 3  # Inverse of the cumulative hazard 0.6 invCum_Hfx(obj1, 0.6) #> [1] 0.2  # Plot of the distribution plot(obj1) obj2 <- s_exponential(surv = 0.8, t = 1) obj2 #> SURVIVAL object #> Distribution:  EXPONENTIAL  #> lambda : 0.2231436  obj3 <- s_exponential(fail = 0.2, t = 1) obj3 #> SURVIVAL object #> Distribution:  EXPONENTIAL  #> lambda : 0.2231436 obj4 <- s_exponential(surv = 0.25, t = 10) ggplot_survival_random(obj4, timeto=10, subjects=1000, nsim=100, alpha = 0.1)"},{"path":"https://johnaponte.github.io/survobj/articles/example_distributions.html","id":"weibull-distribution","dir":"Articles","previous_headings":"","what":"Weibull distribution","title":"Defining and using objects of class SURVIVAL","text":"canonical parameters Weibull distribution scale shape. scale carry information time units. scale parameter can derived proportion surviving failing given time shape needs provided user. scale shape needs numbers bigger 0. value shape equal 1 similar exponential distribution lambda parameter equal scale. shape bigger 1 hazard increasing means events end follow , 0 1 decreasing translate events beginning time risk. following code shows effect shape parameter distributions scale.","code":"wobj1 <- s_weibull(scale = 3, shape = 0.5) wobj2 <- s_weibull(scale = 3, shape = 1) wobj3 <- s_weibull(scale = 3, shape = 1.5)  par(mfrow=c(2,3)) plot(   wobj1$sfx,   from = 0,   to = 1,   main = \"Weibull with shape 0.5\",   xlab = \"Time\",   ylab = \"Proportion without events\",   ylim = c(0,1)) plot(   wobj2$sfx,   from = 0,   to = 1,   main = \"Weibull with shape 1\",   xlab = \"Time\",   ylab = \"Proportion without events\",   ylim = c(0,1)) plot(   wobj3$sfx,   from = 0,   to = 1,   main = \"Weibull with shape 1.5\",   xlab = \"Time\",   ylab = \"Proportion without events\",   ylim = c(0,1)) plot(   wobj1$hfx,   from = 0,   to = 1,   xlab = \"Time\",   ylab = \"hazard\") plot(   wobj2$hfx,   from = 0,   to = 1,   xlab = \"Time\",   ylab = \"hazard\") plot(   wobj3$hfx,   from = 0,   to = 1,   xlab = \"Time\",   ylab = \"hazard\") par(mfrow=c(1,1))"},{"path":"https://johnaponte.github.io/survobj/articles/example_distributions.html","id":"gompertz-distribution","dir":"Articles","previous_headings":"","what":"Gompertz distribution","title":"Defining and using objects of class SURVIVAL","text":"Gompertz distribution two canonical parameters, scale shape. scale needs number higher zero, represents hazard time 0. shape can real number. Negative shape produce decreasing hazard. Positive shape produces increasing hazard. shape zero, distribution reduced exponential distribution, implemented package. Instead error produced. Similarly distributions, scale can derived survival failing proportion given time, shape parameter needs provided. following graph shows effect scale parameter Gompertz distribution","code":"# define a function to generate and plot Gompertz distributions plot_sfx_gompertz<- function(shape, scale = 3, timeto = 1){   plot(     s_gompertz(shape = shape, scale = scale)$sfx,     from = 0,     to = timeto,     main = paste(\"Shape: \", shape),     xlab = \"Time\",     ylab = \"Proportion without events\",     ylim = c(0,1)     ) }  plot_hfx_gompertz<- function(shape, scale = 3, timeto = 1){   plot(     s_gompertz(shape = shape, scale = scale)$hfx,     from = 0,     to = timeto,     xlab = \"Time\",     ylab = \"hazard\",     ylim = c(2,4)     ) }  par(mfrow=c(2,4)) plot_sfx_gompertz(shape = -0.25) plot_sfx_gompertz(shape = -0.10) plot_sfx_gompertz(shape = 0.10) plot_sfx_gompertz(shape = 0.25) plot_hfx_gompertz(shape = -0.25) plot_hfx_gompertz(shape = -0.10) plot_hfx_gompertz(shape = 0.10) plot_hfx_gompertz(shape = 0.25) par(mfrow = c(1,1))"},{"path":"https://johnaponte.github.io/survobj/articles/example_distributions.html","id":"piecewise-exponential-distribution","dir":"Articles","previous_headings":"","what":"Piecewise Exponential distribution","title":"Defining and using objects of class SURVIVAL","text":"Piecewise Exponential distribution flexible distribution hazard treated constant breaks occurs value new hazard used. class implements two parameters breaks defines breaks points hazards define hazard used break point time. factory function provide warning last break Inf otherwise distribution completely defined. parameters break = c(1,2,3,Inf), hazards = c(0.1,3,4,3) implements distribution hazard 0.1 time 1, 3 time 1 time 2, hazard 4 time 3 point hazard 3 . distribution can also defined proportion surviving failing, breaks segments. case segments scaled create hazards results specified proportion surviving failing last Inf break point. example parameters surv = 0.2, breaks = c(1,2,3,Inf),  segments = c(1, 2, 3, 1) scale segments hazards way time = 3 surviving proportion 0.2. See following example","code":"pobj <- s_piecewise(surv = 0.2, breaks = c(1,2,3,Inf), segments = c(1,2,3,1)) pobj #> SURVIVAL object #> Distribution:  PIECEWISE  #> breaks : 1 2 3 Inf  #> hazards : 0.2682397 0.5364793 0.804719 0.2682397 pobj$sfx(3) #> [1] 0.2 plot_survival(pobj, timeto = 3)"},{"path":"https://johnaponte.github.io/survobj/articles/example_distributions.html","id":"log-logistic-distribution","dir":"Articles","previous_headings":"","what":"Log-logistic distribution","title":"Defining and using objects of class SURVIVAL","text":"Log-logistic distribution two canonical parameters, scale shape parameters.","code":"pobj <- s_loglogistic(scale = 3, shape = 1.5) plot_survival(pobj, timeto = 3)"},{"path":"https://johnaponte.github.io/survobj/articles/example_distributions.html","id":"log-normal-distribution","dir":"Articles","previous_headings":"","what":"Log-Normal distribution","title":"Defining and using objects of class SURVIVAL","text":"Log-normal distribution two canonical parameters. shape parameter defined median value distribution, shape parameter represents standard deviation distribution log scale.","code":"pobj <- s_lognormal(scale = 1.5, shape = 0.8) plot_survival(pobj, timeto = 3)"},{"path":"https://johnaponte.github.io/survobj/articles/example_distributions.html","id":"comparison-of-survival-objects","dir":"Articles","previous_headings":"","what":"Comparison of SURVIVAL objects","title":"Defining and using objects of class SURVIVAL","text":"function compare_survival() can produce graphic comparison two SURVIVAL objects. objects need distribution family.","code":"cobj1<- s_exponential(lambda = 3) cobj2<- s_gompertz(scale = 3, shape = 0.4) compare_survival(cobj1, cobj2, timeto = 2)"},{"path":[]},{"path":"https://johnaponte.github.io/survobj/articles/simulation_distributions.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Simulation of survival times","text":"Following Bender, Augustin, Blettner (2003) Leemis (1987), simulation survival times possible function invert cumulative hazard (\\(H^{-1}\\)), Random survival times baseline distribution can generated uniform distribution 0-1 \\(U\\) : \\[ T = H^{-1}(-log(U)) \\] survival distribution object, can accomplished function rsurv(s_object, n) generate n number random draws distribution s_object. objects s_distribution family implements function inverts survival time function invCum_Hfx() function ggplot_survival_random() helps graph Kaplan-Meier graphs cumulative hazard simulated times distribution","code":"s_obj <- s_exponential(fail = 0.4, t = 2) ggplot_survival_random(s_obj, timeto =2, subjects = 1000, nsim= 10, alpha = 0.3)"},{"path":"https://johnaponte.github.io/survobj/articles/simulation_distributions.html","id":"generation-of-proportional-hazard-times","dir":"Articles","previous_headings":"","what":"Generation of Proportional Hazard times","title":"Simulation of survival times","text":"Survival times hazard proportional baseline hazard can simulated \\[ T = H^{-1}\\left(\\frac{-log(U)}{HR}\\right) \\] \\(HR\\) hazard ratio. function rsurv_hr(s_object, hr) can generate random number hazards proportionals baseline hazard. function produce many numbers length hr vector. example: function ggplot_survival_hr() can plot simulated data proportional hazard assumption.","code":"s_obj <- s_exponential(fail = 0.4, t = 2) group <- c(rep(0,500), rep(1,500)) hr_vector <- c(rep(1,500),rep(2,500)) times <- rsurvhr(s_obj, hr_vector) plot(survfit(Surv(times)~group), xlim=c(0,5)) s_obj <- s_exponential(fail = 0.4, t = 2) ggplot_survival_hr(s_obj, hr = 2, nsim = 10, subjects = 1000, timeto = 5)"},{"path":"https://johnaponte.github.io/survobj/articles/simulation_distributions.html","id":"generation-of-acceleration-failure-times","dir":"Articles","previous_headings":"","what":"Generation of Acceleration Failure Times","title":"Simulation of survival times","text":"Survival times accelerated failure time baseline hazard can simulated \\[ T = \\frac{H^{-1}(-log(U))}{AFT}\\] \\(AFT\\) acceleration factor, meaning example AFT 2 events two times quicker baseline function rsurv_aft(s_object, aft) can generate random numbers accelerated AFT factor. function produce many numbers length aft vector. example:  example, scale parameter Log-Normal distribution represents mean time simulation accelerated factor 2 move average median 2 1 proportional hazard accelerated failure combined accelerated hazard time generated. can accomplished function rsurvah() function ggplot_random_ah() functions","code":"s_obj <- s_lognormal(scale = 2, shape = 0.5) ggplot_survival_aft(s_obj, aft = 2, nsim = 10, subjects = 1000, timeto = 5)"},{"path":[]},{"path":"https://johnaponte.github.io/survobj/articles/simulation_trials.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Simulating trials with survival endpoints","text":"can use objects class SURVIVAL simulate surviving times clinical trials. present one example want estimate empirical power detect significantly vaccine efficacy. empirical power define percentage times p-value coefficient indicates treatment equal 0.05.","code":"library(survobj) library(survival)"},{"path":"https://johnaponte.github.io/survobj/articles/simulation_trials.html","id":"empirical-power-for-superiority","dir":"Articles","previous_headings":"","what":"Empirical power for superiority","title":"Simulating trials with survival endpoints","text":"Assumptions: made 1000 simulations 250 participants group, one group control vaccinated vaccine efficacy 40% (.e hazard ratio 1-40/100 = 0.6) control group follows exponential distribution 40% subjects event time 12 months (365.25 days) simulated data analyzed using Cox regression. estimate empirical power percentage simulations p-value coefficient group 0.05 lower. present empirical power distribution total number events estimated vaccine efficacy","code":"# Number of simulations nsim = 1000  # Participants in each group nsubjects = 250  # Vaccine efficacy ve = 40  # Hazard ratio hr = 1-ve/100  # Follow-up time ftime <- 12  # Fail events in controls  fail_control = 0.4  # Define Object with exponential distribution for events in controls s_events <- s_exponential(fail = fail_control, t = ftime)"},{"path":"https://johnaponte.github.io/survobj/articles/simulation_trials.html","id":"simulation","dir":"Articles","previous_headings":"","what":"Simulation","title":"Simulating trials with survival endpoints","text":"","code":"set.seed(12345)  # Define the group for the subjects group = c(rep(0, nsubjects), rep(1, nsubjects))      # Define the hazard ratio according to the group hr_vector <- ifelse(group ==0,1,hr)  # Loop     sim <- lapply(   1:nsim,   function(x){     # Simulate survival times for event     sim_time_event <- s_events$rsurvhr(hr_vector)          # Censor events at end of follow-up.     cevent <- censor_event(censor_time = ftime, time = sim_time_event, event = 1)     ctime <- censor_time(censor_time = ftime, time = sim_time_event)          # Analyze the data using cox regression     reg <- summary(coxph(Surv(ctime, cevent)~ group))          # Collect the information     pval = reg$coefficients[\"group\",\"Pr(>|z|)\"]     ve = (1- exp(reg$coefficients[\"group\",\"coef\"]))*100     nevents = reg$nevent          # return values     return(data.frame(simid = x, pval,ve, nevents))   } )  # Join all the simulations in a single data frame sim_df <- do.call(rbind, sim)"},{"path":"https://johnaponte.github.io/survobj/articles/simulation_trials.html","id":"analyze-the-simulation","dir":"Articles","previous_headings":"","what":"Analyze the simulation","title":"Simulating trials with survival endpoints","text":"","code":"empirical_power = binom.test(sum(sim_df$pval <= 0.05), length(sim_df$pval)) empirical_power$estimate #> probability of success  #>                  0.902 empirical_power$conf.int #> [1] 0.8818715 0.9197225 #> attr(,\"conf.level\") #> [1] 0.95  # Distribution of the simulated VEs} summary(sim_df$ve) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    2.22   33.37   40.06   39.33   46.16   68.22  # Distribution of the simulated number of events summary(sim_df$nevents) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   134.0   159.0   166.0   166.5   174.0   206.0"},{"path":"https://johnaponte.github.io/survobj/articles/simulation_trials.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Simulating trials with survival endpoints","text":"simulation provides estimate empirical power 90.2% 95%CI ( 88.2%, 92% ) reference, output power calculation using PASS 2021(R) using parameters","code":""},{"path":"https://johnaponte.github.io/survobj/articles/simulation_trials2.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Simulation trials: non-proportional hazard","text":"can use objects class SURVIVAL simulate surviving times clinical trials. present example evaluation empirical power detect non proportionality hazard. example, simulation survival times control group follows Weibull distribution shape 0.8 (negative) failure rate 0.6 month 12. experimental group vaccine efficacy 80% first month, decrease linearly 10% month 12. simulate survival times experimental group using piecewise exponential distribution changes month follow linear decrease vaccine efficacy. empirical power define percentage test non-proportionality p-value lower equal 0.05","code":"library(survobj) library(survival)"},{"path":"https://johnaponte.github.io/survobj/articles/simulation_trials2.html","id":"empirical-power-to-evaluate-non-proportionality-of-the-hazard","dir":"Articles","previous_headings":"","what":"Empirical power to evaluate non proportionality of the hazard","title":"Simulation trials: non-proportional hazard","text":"Assumptions: made 1000 simulations 250 participants group, one group control vaccinated vaccine efficacy 90% first month, decrease linearly 15% end month12 control group follows Weibull distribution shape 0.8 failure rate 0.4 month 12. simulated data analyzed using Cox regression, proportionality hazard assumption evaluated following method described GRAMBSCH THERNEAU (1994) implemented survival package function cox.zph() estimate empirical power percentage simulations p-value coefficient group 0.05 lower. present empirical power distribution total number events estimated vaccine efficacy following graph compare two distributions","code":"# Number of simulations nsim = 1000  # Participants in each group nsubjects = 250  # Follow-up time ftime <- 12  # Vaccine efficacy ve_start = 80 ve_end = 10  # Hazard ratio hr <- function(t){   vm <- ve_start - (ve_start-ve_end)/(ftime-1)*(t-1)   1-vm/100 }  # Fail events in controls  fail_control = 0.4  # Define Object with weibull distribution for events in controls s_ctrl <- s_weibull(fail = fail_control, t = ftime, shape = 0.8)   # Define Object with Picewise exponential distribution in vaccinated  s_vacc <- s_piecewise(             breaks = c(1:12,Inf),              hazards = c(s_ctrl$hfx(1:12)*hr(1:12), s_ctrl$hfx(12)*hr(12))) compare_survival(s_ctrl, s_vacc, timeto = 12)"},{"path":"https://johnaponte.github.io/survobj/articles/simulation_trials2.html","id":"simulation","dir":"Articles","previous_headings":"","what":"Simulation","title":"Simulation trials: non-proportional hazard","text":"","code":"set.seed(12345)  # Define the group for the subjects group = c(rep(0, nsubjects), rep(1, nsubjects))       # Loop     sim <- lapply(   1:nsim,   function(x){     # Simulate survival times for event     # Using one distribution for the controls and other for the vaccinated     sim_time_event <- c(s_ctrl$rsurv(nsubjects), s_vacc$rsurv(nsubjects))          # Censor events at end of follow-up.     cevent <- censor_event(censor_time = ftime, time = sim_time_event, event = 1)     ctime <- censor_time(censor_time = ftime, time = sim_time_event)          # Analyze the data using cox regression     reg <- coxph(Surv(ctime, cevent)~ group)     sreg <- summary(reg)     phz <- cox.zph(reg)          # Collect the information     pval = phz$table[\"group\",\"p\"]     ve = (1- exp(sreg$coefficients[\"group\",\"coef\"]))*100     nevents = sreg$nevent          # return values     return(data.frame(simid = x, pval,ve, nevents))   } )  # Join all the simulations in a single data frame sim_df <- do.call(rbind, sim)"},{"path":"https://johnaponte.github.io/survobj/articles/simulation_trials2.html","id":"analyze-the-simulation","dir":"Articles","previous_headings":"","what":"Analyze the simulation","title":"Simulation trials: non-proportional hazard","text":"","code":"empirical_power = binom.test(sum(sim_df$pval <= 0.05), length(sim_df$pval)) empirical_power$estimate #> probability of success  #>                  0.839 empirical_power$conf.int #> [1] 0.8147291 0.8612550 #> attr(,\"conf.level\") #> [1] 0.95  # Distribution of the simulated VE estimated under PH assumpation summary(sim_df$ve) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   23.74   47.63   52.98   52.32   57.82   72.81  # Distribution of the simulated number of events summary(sim_df$nevents) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>     126     149     156     156     163     184"},{"path":"https://johnaponte.github.io/survobj/articles/simulation_trials2.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Simulation trials: non-proportional hazard","text":"simulation provides estimate empirical power reject proportionality hazard assumption condition 83.9% 95%CI ( 81.5%, 86.1% )","code":""},{"path":[]},{"path":"https://johnaponte.github.io/survobj/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Aponte John. Author, maintainer, copyright holder.","code":""},{"path":"https://johnaponte.github.io/survobj/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"John (2024). survobj: Objects Simulate Survival Times. R package version 2.0.0.9000, https://github.com/johnaponte/survobj, https://johnaponte.github.io/survobj/.","code":"@Manual{,   title = {survobj: Objects to Simulate Survival Times},   author = {Aponte John},   year = {2024},   note = {R package version 2.0.0.9000, https://github.com/johnaponte/survobj},   url = {https://johnaponte.github.io/survobj/}, }"},{"path":"https://johnaponte.github.io/survobj/index.html","id":"introduction-to-the-survobj-package","dir":"","previous_headings":"","what":"Objects to Simulate Survival Times","title":"Objects to Simulate Survival Times","text":"John Aponte","code":""},{"path":"https://johnaponte.github.io/survobj/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Objects to Simulate Survival Times","text":"package defines set classes encapsulate survival distributions objects class SURVIVAL encapsulate distributions survival times. class set parameters SURVIVAL object defined, access functions calculate: survival time function: sfx(), hazard time function: hfx(), cumulative hazard function: Cum_Hfx() inverse cumulative hazard function: invCum_Hfx(). generate random survival times: rsurv() generate random survival times proportional hazard ratio: rsurvhr(). generate random survival times accelerated failure : rsuvrvaft() generate random survival times accelerate hazard: rsurvah() several functions plot distributions generic S3: plot.SURVIVAL() plot_survival(): plot functions ggplot_survival_random(): ggplot random draws distribution ggplot_survival_hr(): ggplot random draws distribution using hazard ratio ggplot_survival_aft(): ggplot random draws distribution using accelerated time failure ggplot_survival_ah(): ggplot random draws distribution using accelerated hazard compare_survival(): graphically compare functions two SURVIVAL objects","code":""},{"path":"https://johnaponte.github.io/survobj/index.html","id":"distributions","dir":"","previous_headings":"","what":"Distributions","title":"Objects to Simulate Survival Times","text":"current factories implemented: s_exponential(): Exponential distributions s_weibull(): Weibull distributions s_gompertz(): Gompertz distributions s_piecewise(): Piecewise exponential distributions s_loglogistic(): Log Logistic distributions s_lognormal(): Log Normal distributions See vignettes examples use simulation survival data.","code":""},{"path":"https://johnaponte.github.io/survobj/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Objects to Simulate Survival Times","text":"install development version package github use: devtools::install_github(\"johnaponte/survobj\", build_manual = T, build_vignettes = T) information: https://johnaponte.github.io/survobj/","code":""},{"path":"https://johnaponte.github.io/survobj/reference/SURVIVAL.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions for SURVIVAL objects — sfx","title":"Functions for SURVIVAL objects — sfx","text":"SURVIVAL objects access functions described ","code":""},{"path":"https://johnaponte.github.io/survobj/reference/SURVIVAL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions for SURVIVAL objects — sfx","text":"","code":"sfx(SURVIVAL, t)  hfx(SURVIVAL, t)  Cum_Hfx(SURVIVAL, t)  invCum_Hfx(SURVIVAL, H)  rsurv(SURVIVAL, n)  rsurvhr(SURVIVAL, hr)  rsurvhr(SURVIVAL, hr)  rsurvaft(SURVIVAL, aft)  rsurvah(SURVIVAL, aft, hr)  plot_survival(SURVIVAL, timeto, main)  ggplot_survival_random(SURVIVAL, timeto, subjects, nsim, alpha = 0.1)  compare_survival(SURVIVAL1, SURVIVAL2, timeto, main)  ggplot_survival_hr(SURVIVAL, hr, timeto, subjects, nsim, alpha = 0.1)  ggplot_survival_aft(SURVIVAL, aft, timeto, subjects, nsim, alpha = 0.1)  ggplot_survival_ah(SURVIVAL, aft, hr, timeto, subjects, nsim, alpha = 0.1)"},{"path":"https://johnaponte.github.io/survobj/reference/SURVIVAL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions for SURVIVAL objects — sfx","text":"SURVIVAL SURVIVAL object t Time H cumulative hazard n number observations hr hazard ratio aft accelerated failure time timeto plot distribution timeto main title graph subjects number subjects per group simulate simulation nsim number simulations alpha alpha value graph SURVIVAL1 SURVIVAL object SURVIVAL2 SURVIVAL object","code":""},{"path":"https://johnaponte.github.io/survobj/reference/SURVIVAL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions for SURVIVAL objects — sfx","text":"Depending function proportion surviving, hazard, cumulative hazard, inverse cumulative hazard, random draw plot","code":""},{"path":"https://johnaponte.github.io/survobj/reference/SURVIVAL.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Functions for SURVIVAL objects — sfx","text":"sfx(): Survival function hfx(): Hazard function Cum_Hfx(): Cumulative Hazard function invCum_Hfx(): Inverse Cumulative Hazard function rsurv(): Generate random values distribution rsurvhr(): Generate random values distribution proportional hazard ratios rsurvhr(): Generate random values distribution proportional hazard ratios rsurvaft(): Generate random values distribution accelerated failure time ratios rsurvah(): Generate random values distribution accelerated hazard ratios plot_survival(): Plot survival functions ggplot_survival_random(): ggplot simulation survival times compare_survival(): Compare graphically two survival distributions ggplot_survival_hr(): ggplot simulation survival times hazard ratios ggplot_survival_aft(): ggplot simulation survival times accelerated time failures ggplot_survival_ah(): ggplot simulation survival times accelerated hazard","code":""},{"path":"https://johnaponte.github.io/survobj/reference/SURVIVAL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Functions for SURVIVAL objects — sfx","text":"","code":"#' # Define a SURVIVAL object obj <- s_factory(s_weibull, surv = 0.8, t = 2, shape = 1.2)  # Survival, Hazard and Cumulative hazard at time 0.4 sfx(SURVIVAL = obj, t= 0.4) #> [1] 0.9681716 hfx(SURVIVAL = obj, t = 0.4) #> [1] 0.09703794 Cum_Hfx(SURVIVAL = obj, t = 0.4) #> [1] 0.03234598  # Time when the Cumulative hazard is 0.8 invCum_Hfx(SURVIVAL = obj, H = 0.8) #> [1] 5.795862  # Draw one random survival time from the distribution rsurv(SURVIVAL = obj, n = 1) #> [1] 8.621719  # Draw one random survival time from the distribution under Proportional # hazard, Accelerated time failure or Accelerated hazard. rsurvhr(SURVIVAL = obj, hr = 0.5) #> [1] 11.61979 rsurvaft(SURVIVAL = obj, aft = 2) #> [1] 2.414814 rsurvah(SURVIVAL = obj, aft = 2, hr = 0.5) #> [1] 3.053863  # Plot the survival functions plot_survival(SURVIVAL = obj, timeto = 2, main = \"Example of Weibull distribution\" )"},{"path":"https://johnaponte.github.io/survobj/reference/censor_event.html","id":null,"dir":"Reference","previous_headings":"","what":"Censor of events — censor_event","title":"Censor of events — censor_event","text":"censor_time < time, event change 0, otherwise changed","code":""},{"path":"https://johnaponte.github.io/survobj/reference/censor_event.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Censor of events — censor_event","text":"","code":"censor_event(censor_time, time, event)  censor_time(censor_time, time)"},{"path":"https://johnaponte.github.io/survobj/reference/censor_event.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Censor of events — censor_event","text":"censor_time time censor time time variable censor_time applied event variable event. can initialized call value times.","code":""},{"path":"https://johnaponte.github.io/survobj/reference/censor_event.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Censor of events — censor_event","text":"censored time event","code":""},{"path":"https://johnaponte.github.io/survobj/reference/censor_event.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Censor of events — censor_event","text":"censor_time < time, time changed censor_time, otherwise change careful overwrite time variable censor time variable loose track events","code":""},{"path":"https://johnaponte.github.io/survobj/reference/censor_event.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Censor of events — censor_event","text":"censor_time(): Censor time","code":""},{"path":"https://johnaponte.github.io/survobj/reference/censor_event.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Censor of events — censor_event","text":"","code":"if (FALSE) { # {     FALSE }  # Typical workflow in a simulation of survival time. # Simulate time to event (sim_t_event) # and simulates the time to lost to follow up (tim_t_ltof) # the simulation time frame is 1, so everything after 1 is censored  require(dplyr) data.frame(   sim_t_event = c(0.5,0.6,1,10,20),   sim_t_ltof = c(2,0.5,2,2,0.8)  ) |>  mutate(sevent = censor_event(1,sim_t_event,sim_event=1)) |>  mutate(stime = censor_time(1,sim_t_event)) |>  mutate(event = censor_event(sim_t_ltof, stime, sevent)) |>  mutate(timeto = censor_time(sim_t_ltof, stime)) }"},{"path":"https://johnaponte.github.io/survobj/reference/fx_h_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions to help in time conversion — fx_h_time","title":"Functions to help in time conversion — fx_h_time","text":"set functions help time conversion, taking account generic times specific times. conversions based assumption 1 year 365.25 days 12 months. adjustment lap days difference days months","code":""},{"path":"https://johnaponte.github.io/survobj/reference/fx_h_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions to help in time conversion — fx_h_time","text":"","code":"dtom(x)  mtod(x)  dtoy(x)  ytod(x)  mtoy(x)  ytom(x)"},{"path":"https://johnaponte.github.io/survobj/reference/fx_h_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions to help in time conversion — fx_h_time","text":"x time convert","code":""},{"path":"https://johnaponte.github.io/survobj/reference/fx_h_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions to help in time conversion — fx_h_time","text":"converted time","code":""},{"path":"https://johnaponte.github.io/survobj/reference/fx_h_time.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Functions to help in time conversion — fx_h_time","text":"dtom(): convert days months mtod(): convert months days dtoy(): convert days years ytod(): convert years days mtoy(): convert months year ytom(): convert years months","code":""},{"path":"https://johnaponte.github.io/survobj/reference/fx_h_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Functions to help in time conversion — fx_h_time","text":"","code":"dtom(365.25) #> [1] 12 mtod(12) #> [1] 365.25 dtoy(165.25) #> [1] 0.4524298 ytod(1) #> [1] 365.25 mtoy(12) #> [1] 1 ytom(365.25) #> [1] 4383"},{"path":"https://johnaponte.github.io/survobj/reference/is_single_number.html","id":null,"dir":"Reference","previous_headings":"","what":"Confirm is a single number — is_single_number","title":"Confirm is a single number — is_single_number","text":"Evaluates argument single number","code":""},{"path":"https://johnaponte.github.io/survobj/reference/is_single_number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confirm is a single number — is_single_number","text":"","code":"is_single_number(x)"},{"path":"https://johnaponte.github.io/survobj/reference/is_single_number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confirm is a single number — is_single_number","text":"x variable evaluate","code":""},{"path":"https://johnaponte.github.io/survobj/reference/is_single_number.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confirm is a single number — is_single_number","text":"TRUE single number, FALSE otherwise","code":""},{"path":"https://johnaponte.github.io/survobj/reference/is_single_number.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Confirm is a single number — is_single_number","text":"","code":"is_single_number(3)  #TRUE #> [1] TRUE is_single_number(c(3,3,3)) #FALSE #> [1] FALSE is_single_number(list(a=3)) #FALSE #> [1] FALSE is_single_number(\"3\") #FALSE #> [1] FALSE"},{"path":"https://johnaponte.github.io/survobj/reference/s_exponential.html","id":null,"dir":"Reference","previous_headings":"","what":"Factory of SURVIVAL objects with Exponential distributions — s_exponential","title":"Factory of SURVIVAL objects with Exponential distributions — s_exponential","text":"Creates SURVIVAL object Exponential distribution.","code":""},{"path":"https://johnaponte.github.io/survobj/reference/s_exponential.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factory of SURVIVAL objects with Exponential distributions — s_exponential","text":"","code":"s_exponential(...)"},{"path":"https://johnaponte.github.io/survobj/reference/s_exponential.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factory of SURVIVAL objects with Exponential distributions — s_exponential","text":"... Parameters define distribution. See Parameters details","code":""},{"path":"https://johnaponte.github.io/survobj/reference/s_exponential.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factory of SURVIVAL objects with Exponential distributions — s_exponential","text":"SURVIVAL object exponential distribution family. See documentation s_factory methods available SURVIVAL objects","code":""},{"path":"https://johnaponte.github.io/survobj/reference/s_exponential.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Factory of SURVIVAL objects with Exponential distributions — s_exponential","text":"create exponential survival object following options available: lambda specify canonical parameter distribution, surv t proportion surviving (events) time t, fail t proportion failing (events) time t lambda = -log(surv)/t lambda = -log(1-fail)/t parameters spell correctly partial matching available","code":""},{"path":"https://johnaponte.github.io/survobj/reference/s_exponential.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factory of SURVIVAL objects with Exponential distributions — s_exponential","text":"","code":"s_exponential(lambda = 3) #> SURVIVAL object #> Distribution:  EXPONENTIAL  #> lambda : 3  s_exponential(surv = 0.4, t = 2) #> SURVIVAL object #> Distribution:  EXPONENTIAL  #> lambda : 0.4581454  s_exponential(fail = 0.6, t = 2) #> SURVIVAL object #> Distribution:  EXPONENTIAL  #> lambda : 0.4581454"},{"path":"https://johnaponte.github.io/survobj/reference/s_factory.html","id":null,"dir":"Reference","previous_headings":"","what":"Factory of objects of class SURVIVAL — s_factory","title":"Factory of objects of class SURVIVAL — s_factory","text":"Create objects class SURVIVAL","code":""},{"path":"https://johnaponte.github.io/survobj/reference/s_factory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factory of objects of class SURVIVAL — s_factory","text":"","code":"s_factory(s_family, ...)"},{"path":"https://johnaponte.github.io/survobj/reference/s_factory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factory of objects of class SURVIVAL — s_factory","text":"s_family factory specific distribution ... parameters define survival distribution","code":""},{"path":"https://johnaponte.github.io/survobj/reference/s_factory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factory of objects of class SURVIVAL — s_factory","text":"SURVIVAL object","code":""},{"path":"https://johnaponte.github.io/survobj/reference/s_factory.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Factory of objects of class SURVIVAL — s_factory","text":"objects class SURVIVAL define different distributions survival times. class set parameters SURVIVAL object defined, access functions calculate: survival time function: sfx(), hazard time function: hfx(), cumulative hazard function: Cum_Hfx() inverse cumulative hazard function: invCum_Hfx(). generate random survival times: rsurv() generate random survival times proportional hazard ratio: rsurvhr(). several functions plot distributions generic S3:  plot.SURVIVAL() plot_survival(): plot functions ggplot_survival_random(): ggplot random draws distribution compare_survival():  compare functions two SURVIVAL objects","code":""},{"path":"https://johnaponte.github.io/survobj/reference/s_factory.html","id":"distributions","dir":"Reference","previous_headings":"","what":"Distributions","title":"Factory of objects of class SURVIVAL — s_factory","text":"current factories implemented: s_exponential(): Exponential distributions s_weibull(): Weibull distributions s_gompertz(): Gompertz distributions s_picewise(): Piecewise exponential distributions","code":""},{"path":"https://johnaponte.github.io/survobj/reference/s_factory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factory of objects of class SURVIVAL — s_factory","text":"","code":"# Define a SURVIVAL object obj <- s_factory(s_exponential, lambda = 2)  # Survival, Hazard and Cumulative hazard at time 0.4 sfx(SURVIVAL = obj, t= 0.4) #> [1] 0.449329 hfx(SURVIVAL = obj, t = 0.4) #> [1] 2 Cum_Hfx(SURVIVAL = obj, t = 0.4) #> [1] 0.8  # Time when the Cumulative hazard is 0.8 invCum_Hfx(SURVIVAL = obj, H = 0.8) #> [1] 0.4  # Draw one random survival time from the distribution rsurv(SURVIVAL = obj, n = 1) #> [1] 1.126779  # Draw one random survival time from the distribution, with hazard ratio 0.5 rsurvhr(SURVIVAL = obj, hr = 0.5) #> [1] 2.931189  # Plot the survival functions plot(obj)"},{"path":"https://johnaponte.github.io/survobj/reference/s_gompertz.html","id":null,"dir":"Reference","previous_headings":"","what":"Factory of SURVIVAL objects with Gompertz distributions — s_gompertz","title":"Factory of SURVIVAL objects with Gompertz distributions — s_gompertz","text":"Creates SURVIVAL object Gompertz distribution.","code":""},{"path":"https://johnaponte.github.io/survobj/reference/s_gompertz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factory of SURVIVAL objects with Gompertz distributions — s_gompertz","text":"","code":"s_gompertz(...)"},{"path":"https://johnaponte.github.io/survobj/reference/s_gompertz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factory of SURVIVAL objects with Gompertz distributions — s_gompertz","text":"... Parameters define distribution. See Parameters details","code":""},{"path":"https://johnaponte.github.io/survobj/reference/s_gompertz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factory of SURVIVAL objects with Gompertz distributions — s_gompertz","text":"SURVIVAL object Gompertz distribution family. See documentation s_factory methods available SURVIVAL objects","code":""},{"path":"https://johnaponte.github.io/survobj/reference/s_gompertz.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Factory of SURVIVAL objects with Gompertz distributions — s_gompertz","text":"create exponential survival object following options available: scale shape specify canonical parameter distribution, surv, t shape  proportion surviving (events) time t shape, fail t shape proportion failing (events) time t shape. scale = -log(surv)·shape/(exp(shape·t)) scale = -log(1-fail)·shape/(exp(shape·t)) parameters spell correctly partial matching available","code":""},{"path":"https://johnaponte.github.io/survobj/reference/s_gompertz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factory of SURVIVAL objects with Gompertz distributions — s_gompertz","text":"","code":"s_gompertz(scale = 1, shape = 1.5) #> SURVIVAL object #> Distribution:  GOMPERTZ  #> scale : 1  #> shape : 1.5  s_gompertz(surv = 0.4, t = 2, shape = 1.5) #> SURVIVAL object #> Distribution:  GOMPERTZ  #> scale : 0.07201454  #> shape : 1.5  s_gompertz(fail = 0.6, t = 2, shape = 1.5) #> SURVIVAL object #> Distribution:  GOMPERTZ  #> scale : 0.07201454  #> shape : 1.5"},{"path":"https://johnaponte.github.io/survobj/reference/s_loglogistic.html","id":null,"dir":"Reference","previous_headings":"","what":"Factory of SURVIVAL objects with Log Logistic distributions — s_loglogistic","title":"Factory of SURVIVAL objects with Log Logistic distributions — s_loglogistic","text":"Creates SURVIVAL object Log Logistic distribution.","code":""},{"path":"https://johnaponte.github.io/survobj/reference/s_loglogistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factory of SURVIVAL objects with Log Logistic distributions — s_loglogistic","text":"","code":"s_loglogistic(...)"},{"path":"https://johnaponte.github.io/survobj/reference/s_loglogistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factory of SURVIVAL objects with Log Logistic distributions — s_loglogistic","text":"... Parameters define distribution. See Parameters details","code":""},{"path":"https://johnaponte.github.io/survobj/reference/s_loglogistic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factory of SURVIVAL objects with Log Logistic distributions — s_loglogistic","text":"SURVIVAL object log-logistic distribution family. See documentation s_factory methods available SURVIVAL objects","code":""},{"path":"https://johnaponte.github.io/survobj/reference/s_loglogistic.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Factory of SURVIVAL objects with Log Logistic distributions — s_loglogistic","text":"create exponential survival object following options available: scale shape specify canonical parameters distribution, surv, t shape proportion surviving (events) time t shape parameter, fail, t shape proportion failing (events) time t shape parameter intercept scale parameters returned survreg(.., dist = \"loglogistic\") models. parameters spell correctly partial matching available","code":""},{"path":"https://johnaponte.github.io/survobj/reference/s_loglogistic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factory of SURVIVAL objects with Log Logistic distributions — s_loglogistic","text":"","code":"s_loglogistic(scale = 2,shape = 2) #> SURVIVAL object #> Distribution:  LOGLOGISTIC  #> scale : 2  #> shape : 2  s_loglogistic(surv = 0.6, t= 12, shape = 0.5) #> SURVIVAL object #> Distribution:  LOGLOGISTIC  #> scale : 0.03703704  #> shape : 0.5  s_loglogistic(fail = 0.4, t = 12, shape =0.5) #> SURVIVAL object #> Distribution:  LOGLOGISTIC  #> scale : 0.03703704  #> shape : 0.5  s_loglogistic(intercept = 0.4, scale = 0.5) #> SURVIVAL object #> Distribution:  LOGLOGISTIC  #> scale : 0.67032  #> shape : 2"},{"path":"https://johnaponte.github.io/survobj/reference/s_lognormal.html","id":null,"dir":"Reference","previous_headings":"","what":"Factory of SURVIVAL objects with Log Normal distributions — s_lognormal","title":"Factory of SURVIVAL objects with Log Normal distributions — s_lognormal","text":"Creates SURVIVAL object Log Normal distribution.","code":""},{"path":"https://johnaponte.github.io/survobj/reference/s_lognormal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factory of SURVIVAL objects with Log Normal distributions — s_lognormal","text":"","code":"s_lognormal(...)"},{"path":"https://johnaponte.github.io/survobj/reference/s_lognormal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factory of SURVIVAL objects with Log Normal distributions — s_lognormal","text":"... Parameters define distribution. See Parameters details","code":""},{"path":"https://johnaponte.github.io/survobj/reference/s_lognormal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factory of SURVIVAL objects with Log Normal distributions — s_lognormal","text":"SURVIVAL object log-normal distribution family. See documentation s_factory methods available SURVIVAL objects","code":""},{"path":"https://johnaponte.github.io/survobj/reference/s_lognormal.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Factory of SURVIVAL objects with Log Normal distributions — s_lognormal","text":"create exponential survival object following options available: scale shape specify canonical parameters distribution, surv, t shape proportion surviving (events) time t shape parameter, fail, t shape proportion failing (events) time t shape parameter intercept shape parameters returned survreg(.., dist = \"lognormal\") models. scale parameter median value distribution, shape log standard deviation parameters spell correctly partial matching available","code":""},{"path":"https://johnaponte.github.io/survobj/reference/s_lognormal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factory of SURVIVAL objects with Log Normal distributions — s_lognormal","text":"","code":"s_lognormal(scale = 2,shape = 2) #> SURVIVAL object #> Distribution:  LOGNORMAL  #> scale : 2  #> shape : 2  s_lognormal(surv = 0.6, t= 12, shape = 0.5) #> SURVIVAL object #> Distribution:  LOGNORMAL  #> scale : 13.62056  #> shape : 0.5  s_lognormal(fail = 0.4, t = 12, shape =0.5) #> SURVIVAL object #> Distribution:  LOGNORMAL  #> scale : 13.62056  #> shape : 0.5  s_lognormal(intercept = 0.4, scale = 0.5) #> SURVIVAL object #> Distribution:  LOGNORMAL  #> scale : 1.491825  #> shape : 0.5"},{"path":"https://johnaponte.github.io/survobj/reference/s_piecewise.html","id":null,"dir":"Reference","previous_headings":"","what":"Factory of SURVIVAL objects with Piecewise Exponential distributions — s_piecewise","title":"Factory of SURVIVAL objects with Piecewise Exponential distributions — s_piecewise","text":"Creates SURVIVAL object Piecewise Exponential distribution.","code":""},{"path":"https://johnaponte.github.io/survobj/reference/s_piecewise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factory of SURVIVAL objects with Piecewise Exponential distributions — s_piecewise","text":"","code":"s_piecewise(...)"},{"path":"https://johnaponte.github.io/survobj/reference/s_piecewise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factory of SURVIVAL objects with Piecewise Exponential distributions — s_piecewise","text":"... Parameters define distribution. See Parameters details","code":""},{"path":"https://johnaponte.github.io/survobj/reference/s_piecewise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factory of SURVIVAL objects with Piecewise Exponential distributions — s_piecewise","text":"SURVIVAL object piecewise exponential distribution family. See documentation s_factory methods available SURVIVAL objects","code":""},{"path":"https://johnaponte.github.io/survobj/reference/s_piecewise.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Factory of SURVIVAL objects with Piecewise Exponential distributions — s_piecewise","text":"create piecewise exponential survival object following options available: breaks hazards specify exponential (constant) hazard break, surv, breaks segments proportion surviving (events) end last segment fail, breaks segments proportion failing (events) end last segment surv fail parameters indicated, segments scaled hazards order mach surviving failing proportion end last segment. Define last break point Inf fully define distribution, otherwise error produce function last break requested parameters spell correctly partial matching available","code":""},{"path":"https://johnaponte.github.io/survobj/reference/s_piecewise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factory of SURVIVAL objects with Piecewise Exponential distributions — s_piecewise","text":"","code":"s_piecewise(breaks = c(1,2,3,Inf), hazards = c(0.5,0.6,0.5,0.1)) #> SURVIVAL object #> Distribution:  PIECEWISE  #> breaks : 1 2 3 Inf  #> hazards : 0.5 0.6 0.5 0.1  s_piecewise(surv = 0.4, breaks = c(1,2,3,Inf), segments = c(1,2,1,2)) #> SURVIVAL object #> Distribution:  PIECEWISE  #> breaks : 1 2 3 Inf  #> hazards : 0.2290727 0.4581454 0.2290727 0.4581454  s_piecewise(fail = 0.6, breaks = c(1,2,3,Inf), segments = c(1,2,1,2)) #> SURVIVAL object #> Distribution:  PIECEWISE  #> breaks : 1 2 3 Inf  #> hazards : 0.2290727 0.4581454 0.2290727 0.4581454"},{"path":"https://johnaponte.github.io/survobj/reference/s_weibull.html","id":null,"dir":"Reference","previous_headings":"","what":"Factory of SURVIVAL objects with Weibull distributions — s_weibull","title":"Factory of SURVIVAL objects with Weibull distributions — s_weibull","text":"Creates SURVIVAL object Weibull distribution.","code":""},{"path":"https://johnaponte.github.io/survobj/reference/s_weibull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factory of SURVIVAL objects with Weibull distributions — s_weibull","text":"","code":"s_weibull(...)"},{"path":"https://johnaponte.github.io/survobj/reference/s_weibull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factory of SURVIVAL objects with Weibull distributions — s_weibull","text":"... Parameters define distribution. See Parameters details","code":""},{"path":"https://johnaponte.github.io/survobj/reference/s_weibull.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factory of SURVIVAL objects with Weibull distributions — s_weibull","text":"SURVIVAL object Weibull distribution family. See documentation s_factory methods available SURVIVAL objects","code":""},{"path":"https://johnaponte.github.io/survobj/reference/s_weibull.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Factory of SURVIVAL objects with Weibull distributions — s_weibull","text":"create exponential survival object following options available: scale shape specify canonical parameters distribution, surv, t shape proportion surviving (events) time t shape parameter, fail, t shape proportion failing (events) time t shape parameter intercept scale parameters returned survreg(.., dist = \"weibull\") models. scale = -log(surv)/(t^shape) scale = -log(1-fail)/(t^shape) parameters spell correctly partial matching available","code":""},{"path":"https://johnaponte.github.io/survobj/reference/s_weibull.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factory of SURVIVAL objects with Weibull distributions — s_weibull","text":"","code":"s_weibull(scale = 2,shape = 2) #> SURVIVAL object #> Distribution:  WEIBULL  #> scale : 2  #> shape : 2  s_weibull(surv = 0.6, t= 12, shape = 0.5) #> SURVIVAL object #> Distribution:  WEIBULL  #> scale : 0.1474627  #> shape : 0.5  s_weibull(fail = 0.4, t = 12, shape =0.5) #> SURVIVAL object #> Distribution:  WEIBULL  #> scale : 0.1474627  #> shape : 0.5  s_weibull(intercept = 0.4, scale = 0.5) #> SURVIVAL object #> Distribution:  WEIBULL  #> scale : 0.449329  #> shape : 2"},{"path":"https://johnaponte.github.io/survobj/reference/survobj-package.html","id":null,"dir":"Reference","previous_headings":"","what":"survobj: Objects to Simulate Survival Times — survobj-package","title":"survobj: Objects to Simulate Survival Times — survobj-package","text":"Generate objects simulate survival times. Random values distributions generated using method described Bender (2003) https://epub.ub.uni-muenchen.de/id/eprint/1716 Leemis (1987) Operations Research, 35(6), 892–894.","code":""},{"path":[]},{"path":"https://johnaponte.github.io/survobj/reference/survobj-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"survobj: Objects to Simulate Survival Times — survobj-package","text":"Maintainer: Aponte John john.j.aponte@gmail.com (ORCID) [copyright holder]","code":""},{"path":"https://johnaponte.github.io/survobj/news/index.html","id":"survobj-200","dir":"Changelog","previous_headings":"","what":"survobj 2.0.0","title":"survobj 2.0.0","text":"CRAN release: 2024-01-11 Addition new distributions new random generators functions Add Log-Logistic distribution Add Log-Normal distribution Add generation accelerated failure random times Add generation accelerated hazard times Improve cumulative hazard inverse cumulative hazard function Exponential Piece wise distribution Add function graph random generated times proportional hazard model, accelerated failure time models, accelerated hazard model. New vignette shows generator accelerated failure random times.","code":""},{"path":"https://johnaponte.github.io/survobj/news/index.html","id":"survobj-10","dir":"Changelog","previous_headings":"","what":"survobj 1.0","title":"survobj 1.0","text":"CRAN release: 2023-12-01 Submission CRAN","code":""},{"path":"https://johnaponte.github.io/survobj/news/index.html","id":"survobj-03","dir":"Changelog","previous_headings":"","what":"survobj 0.3","title":"survobj 0.3","text":"Total refractory factories functions. function rsurvdf defunct replace rsurvhr easier use lincomb function needed anymore deleted Inclusion functions censoring Inclusion graphs comparison Removal dependency plyr Inclusion tests","code":""},{"path":"https://johnaponte.github.io/survobj/news/index.html","id":"survobj-02","dir":"Changelog","previous_headings":"","what":"survobj 0.2","title":"survobj 0.2","text":"Include checks ensure parameter objects single numbers","code":""},{"path":"https://johnaponte.github.io/survobj/news/index.html","id":"survobj-01","dir":"Changelog","previous_headings":"","what":"survobj 0.1","title":"survobj 0.1","text":"First version ready run","code":""}]
